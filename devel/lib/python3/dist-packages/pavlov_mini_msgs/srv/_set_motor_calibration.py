# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from pavlov_mini_msgs/set_motor_calibrationRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class set_motor_calibrationRequest(genpy.Message):
  _md5sum = "0600e947f1e961d431f7d8962da5e976"
  _type = "pavlov_mini_msgs/set_motor_calibrationRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#request constants
int32   servo_index
bool    setCalibration_servo
float32 min_calAngle
float32 max_calAngle
float32 min_posServo
float32 max_posServo
float32 min_posAngle
float32 max_posAngle
float32 min_lim_angle
float32 max_lim_angle
"""
  __slots__ = ['servo_index','setCalibration_servo','min_calAngle','max_calAngle','min_posServo','max_posServo','min_posAngle','max_posAngle','min_lim_angle','max_lim_angle']
  _slot_types = ['int32','bool','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       servo_index,setCalibration_servo,min_calAngle,max_calAngle,min_posServo,max_posServo,min_posAngle,max_posAngle,min_lim_angle,max_lim_angle

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(set_motor_calibrationRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.servo_index is None:
        self.servo_index = 0
      if self.setCalibration_servo is None:
        self.setCalibration_servo = False
      if self.min_calAngle is None:
        self.min_calAngle = 0.
      if self.max_calAngle is None:
        self.max_calAngle = 0.
      if self.min_posServo is None:
        self.min_posServo = 0.
      if self.max_posServo is None:
        self.max_posServo = 0.
      if self.min_posAngle is None:
        self.min_posAngle = 0.
      if self.max_posAngle is None:
        self.max_posAngle = 0.
      if self.min_lim_angle is None:
        self.min_lim_angle = 0.
      if self.max_lim_angle is None:
        self.max_lim_angle = 0.
    else:
      self.servo_index = 0
      self.setCalibration_servo = False
      self.min_calAngle = 0.
      self.max_calAngle = 0.
      self.min_posServo = 0.
      self.max_posServo = 0.
      self.min_posAngle = 0.
      self.max_posAngle = 0.
      self.min_lim_angle = 0.
      self.max_lim_angle = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_iB8f().pack(_x.servo_index, _x.setCalibration_servo, _x.min_calAngle, _x.max_calAngle, _x.min_posServo, _x.max_posServo, _x.min_posAngle, _x.max_posAngle, _x.min_lim_angle, _x.max_lim_angle))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 37
      (_x.servo_index, _x.setCalibration_servo, _x.min_calAngle, _x.max_calAngle, _x.min_posServo, _x.max_posServo, _x.min_posAngle, _x.max_posAngle, _x.min_lim_angle, _x.max_lim_angle,) = _get_struct_iB8f().unpack(str[start:end])
      self.setCalibration_servo = bool(self.setCalibration_servo)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_iB8f().pack(_x.servo_index, _x.setCalibration_servo, _x.min_calAngle, _x.max_calAngle, _x.min_posServo, _x.max_posServo, _x.min_posAngle, _x.max_posAngle, _x.min_lim_angle, _x.max_lim_angle))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 37
      (_x.servo_index, _x.setCalibration_servo, _x.min_calAngle, _x.max_calAngle, _x.min_posServo, _x.max_posServo, _x.min_posAngle, _x.max_posAngle, _x.min_lim_angle, _x.max_lim_angle,) = _get_struct_iB8f().unpack(str[start:end])
      self.setCalibration_servo = bool(self.setCalibration_servo)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_iB8f = None
def _get_struct_iB8f():
    global _struct_iB8f
    if _struct_iB8f is None:
        _struct_iB8f = struct.Struct("<iB8f")
    return _struct_iB8f
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from pavlov_mini_msgs/set_motor_calibrationResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class set_motor_calibrationResponse(genpy.Message):
  _md5sum = "929b8c0d7b68510a3f501a60258c746e"
  _type = "pavlov_mini_msgs/set_motor_calibrationResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#response constants
bool result
string info

"""
  __slots__ = ['result','info']
  _slot_types = ['bool','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       result,info

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(set_motor_calibrationResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.result is None:
        self.result = False
      if self.info is None:
        self.info = ''
    else:
      self.result = False
      self.info = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.result
      buff.write(_get_struct_B().pack(_x))
      _x = self.info
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.result,) = _get_struct_B().unpack(str[start:end])
      self.result = bool(self.result)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.info = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.info = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.result
      buff.write(_get_struct_B().pack(_x))
      _x = self.info
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.result,) = _get_struct_B().unpack(str[start:end])
      self.result = bool(self.result)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.info = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.info = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class set_motor_calibration(object):
  _type          = 'pavlov_mini_msgs/set_motor_calibration'
  _md5sum = '7362753e9baf3d3776513533ce7093fd'
  _request_class  = set_motor_calibrationRequest
  _response_class = set_motor_calibrationResponse
